#!/bin/bash
# Piotr Wasiewicz 2005-2018
# Fragments were taken from Gentoo official and unofficial scripts
# Distributed under the GNU Public License version 2
# Released under the GNU General Public License version 2


#####################################
## POMOC I OPIS ARGUMENTOW POLECENIA

usage() {
  cat <<EOF
v: Gentoo Linux LiveCD generation
Syntax: v <profil> <komenda> ...

Komendy:
 e      wejdz (Enter) na chroot z zamontowanymi z hosta: /dev,/proc,/sys itd. 
        aby zmodyfikowac system
 k      skompiluj jadro linuxa dla usb live 
 s      skompresuj system za pomoca squashfs dla usb live 
 i      wygeneruj LiveDVD ISO obraz
 a      wykonaj etapy: s, i
 c      wypal obraz na plycie dvd
 f      sciagnij gentoo stage3
 u      odmontuj /dev,/proc,/sys itd. z chroota
 eb     uruchomiono vv <profil> e, to wejdz bez montowania z drugiej konsoli
 p      przejdz do plikow konfiguracyjnych vv zwykle w /etc i uruchom mc
 r      przejdz do katalogu chroota i uruchom mc
 2 	uruchom etap 2/8 instalacji - chroot z hosta: v a 2
 2host 	uruchom etap 2/8 instalacji juz po zbootowaniu lub w chroocie
 cfg    pobierz repozytorium gentools skrypty
 cross0 usuń i zrób toolchain armv7-a od nowa
 cross1 zrób toolchain armv7-a jeszcze raz
 arm1 	uruchom 1 etap armv7a: v r arm1
 fmt    skonfiguruj i uruchom qemu binfmt do krosskompilacji
 -h|--help	Wyswietl ten ekran

Piotr Wasiewicz 2005-2018
Distributed under the GNU Public License version 2
EOF
}


#####################################
## WYRZUCANIE W RAZIE BLEDU
#####################################

die() {
	if [ -n "$1" ]
	then
		echo "<${0}> ERROR: $1"
	else
		echo "<${0}> QUITTING."
	fi
	exit 1
}


#####################################
## ${LIVECONF}/profiles/global/settings
#####################################

#DIST=/var/tmp     # where to build iso (need ~1GB)


#####################################
## ${LIVECONF}/profiles/${CD_PROFILE}/settings
#####################################
ACCEPT_LICENSE="*"
RUBY_TARGETS="ruby32"
GRUB_PLATFORMS="pc emu efi-64"
PYTHON_SINGLE_TARGET="python3_13"
PYTHON_TARGETS="python3_13"
PYTHON_ABIS="3.13"
USE_PYTHON="3.13"
POSTGRES_TARGETS="postgres17"
PORTAGE_NICENESS="19"
MAKEOPTS="-j4 -l8"
EMERGE_DEFAULT_OPTS="--getbinpkg --binpkg-respect-use=y --jobs 4 --load-average 8 --quiet-build=y --autounmask=y --autounmask-write --keep-going --verbose-conflicts --autounmask-backtrack=y --backtrack=100"
FEATURES="${FEATURES} getbinpkg binpkg-request-signature sandbox parallel-fetch metadata-transfer fail-clean -compressdebug"
CPU_FLAGS_X86="${CPU_FLAGS_X86} mmxext sse sse2 sse3 ssse3 avx avx2"

USE="systemd -elogind"
#USE="${USE} -X -java systemd -hardened -pic -jit -pgo -graphite branding experimental extras -doc -acl -systemtap"
#USE="${USE} -kde plasma -gnome -gnome-keyring -nautilus grub -mediacenter user-session"
#USE="${USE} reiserfs ntfs fat vfat ntfs reiserfs btrfs dmraid hfs jfs mdadm reiser4 xfs xattr f2fs aufs overlay lvm vnc acl"
#USE="${USE} device-mapper udev openrc kernel-patch -pax_kernel acpi icu -cryptsetup kvm fuse threads usb bluetooth network -consolekit ssl sslv3 wifi -pcap -ipv6 -automount -gnutls -hal -ldap policykit ovs sound -experimental -filecaps mount"
#USE="${USE} -qt4 -qt5 gtk -gtk2 gtk3 javafx cairo sdl avahi webkit boost c++11 c++14 -wxwidgets"

#USE="${USE} video faac faad mpeg mng wmf ogg mpg123 bluray 3dnow win32codecs divx encode dirac alsa a52 aac ieee1394 jpeg2k mp3 schroedinger v4l2 theora vorbis x264 coreavc ffmpeg -libav ffmpeg-mt stereoscopic xvid 3dnowext openal xinerama xvmc g3dvl dts dvd flac opengl xv shaders pulseaudio gstreamer cdr musicbrainz fdk -jack v4l zip"
#USE="${USE} gimp exif lcms jpeg png tiff pdf svg openvg xml gd truetype -qrcode devil gegl introspection imagemagick gif qml"
#USE="${USE} -tools xnest xvfb tslib kms libkms dmx xcb dbus xrandr xorg sna vaapi uxa gbm glamor lcdfilter kdrive infinality xkb"
#USE="${USE} nvidia uvm -cuda gpu egl -wayland osmesa xa vdpau vulkan opencl tinfo gles"
#USE="${USE} lua script llcm-gcc -mpi -mpi-threads openmp smp fortran debugger profiler vala v8 perl python gold -objc-gc -objc -objc++ -static-libs lapack -pic -hardened"
#USE="${USE} cups unicode lzma legacy-systray postgres nsplugin djvu xulrunner bash-completion latex -cleartype -apache2 -apache kpathsea libnotify gnuplot mercurial googledrive"

VIDEO_CARDS="intel radeon nouveau i810 i915 i965 r100 r200 r300 r600 radeonsi amdgpu"
PORT_LOGDIR="/var/log/portage"
QEMU_SOFTMMU_TARGETS="arm x86_64"
QEMU_USER_TARGETS="arm armeb x86_64"
JAVA_HOME="/etc/java-config-2/current-system-vm"
#DEVCHROOT="/dev/sda5"
#CD_STAGEFILE="stage3-amd64-20161013.tar.bz2"
#CD_STAGETARBALL="http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64/"$CD_STAGEFILE
#####################################
#Czy instalujemy z RAM dysku np. z liveusb/dvd?
#RAMDISK=1

#####################################
## PARAMETRY WEJSCIOWE
## WCZYTANIE ~/.livecd-pw 
## oraz ${LIVECONF}/profiles/${CD_PROFILE}/settings
#####################################


PROG=${0}
CD_PROFILE=${1}

( [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] ) && usage &&  exit 1

[ "`whoami`" != "root" ] && die "Zaloguj sie na roota"

[ -z "$LIVECONF" ] && echo "CHROOT: konfigi na /etc/liveusb" && export LIVECONF=/etc/liveusb

[ -z "$1" ] && die "Please specify a profile to use e.g. livecd-pw fxdoo" 
[ ! -d "${LIVECONF}/profiles/$CD_PROFILE" ] && die "Cannot find profile directory: ${LIVECONF}/profiles/$CD_PROFILE"

#[ ! -e "${HOME}/.livecd-pw" ] && die "Cannot find ~/.livecd-pw settings."
#source ~/.livecd-pw || die "Couldn't find local settings in ~/.livecd-pw." 
[ ! -e "${LIVECONF}/profiles/global/settings" ] && die "Cannot find global settings."
source ${LIVECONF}/profiles/global/settings || die "Couldn't find global settings." 
CDLOC=$DIST/iso
[ ! -e $CDLOC ] && mkdir -pv $CDLOC

[ ! -e "${LIVECONF}/profiles/${CD_PROFILE}/settings" ] && die "Profile \"${CD_PROFILE}\" mACCEPT_LICENSE="*"
RUBY_TARGETS="ruby32"
GRUB_PLATFORMS="pc emu efi-64"
PYTHON_SINGLE_TARGET="python3_13"
PYTHON_TARGETS="python3_13"
PYTHON_ABIS="3.13"
USE_PYTHON="3.13"
POSTGRES_TARGETS="postgres17"
PORTAGE_NICENESS="19"
MAKEOPTS="-j4 -l8"
EMERGE_DEFAULT_OPTS="--getbinpkg --binpkg-respect-use=y --jobs 4 --load-average 8 --quiet-build=y --autounmask=y --autounmask-write --keep-going --verbose-conflicts --autounmask-backtrack=y --backtrack=100"
FEATURES="${FEATURES} getbinpkg binpkg-request-signature sandbox parallel-fetch metadata-transfer fail-clean -compressdebug"
CPU_FLAGS_X86="${CPU_FLAGS_X86} mmxext sse sse2 sse3 ssse3 avx avx2"

USE="systemd -elogind"
#USE="${USE} -X -java systemd -hardened -pic -jit -pgo -graphite branding experimental extras -doc -acl -systemtap"
#USE="${USE} -kde plasma -gnome -gnome-keyring -nautilus grub -mediacenter user-session"
#USE="${USE} reiserfs ntfs fat vfat ntfs reiserfs btrfs dmraid hfs jfs mdadm reiser4 xfs xattr f2fs aufs overlay lvm vnc acl"
#USE="${USE} device-mapper udev openrc kernel-patch -pax_kernel acpi icu -cryptsetup kvm fuse threads usb bluetooth network -consolekit ssl sslv3 wifi -pcap -ipv6 -automount -gnutls -hal -ldap policykit ovs sound -experimental -filecaps mount"
#USE="${USE} -qt4 -qt5 gtk -gtk2 gtk3 javafx cairo sdl avahi webkit boost c++11 c++14 -wxwidgets"

#USE="${USE} video faac faad mpeg mng wmf ogg mpg123 bluray 3dnow win32codecs divx encode dirac alsa a52 aac ieee1394 jpeg2k mp3 schroedinger v4l2 theora vorbis x264 coreavc ffmpeg -libav ffmpeg-mt stereoscopic xvid 3dnowext openal xinerama xvmc g3dvl dts dvd flac opengl xv shaders pulseaudio gstreamer cdr musicbrainz fdk -jack v4l zip"
#USE="${USE} gimp exif lcms jpeg png tiff pdf svg openvg xml gd truetype -qrcode devil gegl introspection imagemagick gif qml"
#USE="${USE} -tools xnest xvfb tslib kms libkms dmx xcb dbus xrandr xorg sna vaapi uxa gbm glamor lcdfilter kdrive infinality xkb"
#USE="${USE} nvidia uvm -cuda gpu egl -wayland osmesa xa vdpau vulkan opencl tinfo gles"
#USE="${USE} lua script llcm-gcc -mpi -mpi-threads openmp smp fortran debugger profiler vala v8 perl python gold -objc-gc -objc -objc++ -static-libs lapack -pic -hardened"
#USE="${USE} cups unicode lzma legacy-systray postgres nsplugin djvu xulrunner bash-completion latex -cleartype -apache2 -apache kpathsea libnotify gnuplot mercurial googledrive"

VIDEO_CARDS="intel radeon nouveau i810 i915 i965 r100 r200 r300 r600 radeonsi amdgpu"
PORT_LOGDIR="/var/log/portage"
QEMU_SOFTMMU_TARGETS="arm x86_64"
QEMU_USER_TARGETS="arm armeb x86_64"
JAVA_HOME="/etc/java-config-2/current-system-vm" issing \"settings\" file."
source ${LIVECONF}/profiles/${CD_PROFILE}/settings

PROFILE=${CDLOC}/${CD_PROFILE}
PROFILETMP=${PROFILE}/tmp
[ ! -e $PROFILETMP ] && mkdir -pv $PROFILETMP/kernel
CHROOT=${PROFILE}/chroot
[ ! -e $CHROOT ] && mkdir -pv $CHROOT
ISO=${PROFILE}/iso
[ ! -e $ISO ] && mkdir -pv $ISO
CLOOP_FILE=${ISO}/livecd.squashfs
CD_DISTDIR=$DIST/distfiles 	# pliki zrodlowe
CD_PORTDIR=$DIST/.portage  	# portage drzewo aplikacji do pobrania
[ ! -e $CD_PORTDIR ] && mkdir -pv $CD_PORTDIR
CD_LAYMDIR=$DIST/.repos  	# repos drzewo aplikacji do pobrania
[ ! -e $CD_LAYMDIR ] && mkdir -pv $CD_LAYMDIR
HOST=""

#####################################
##  ARM parametry ###################
#####################################
KERNEL_ARM=raspberrypi-kernel_1.20161020-1
CROSS_COMPILE=armv7a-hardfloat-linux-gnueabi-

#####################################
#####################################
#####################################

mount_all() {
	[ ! -e "$CHROOT/home" ] && [ ! -z $DEVCHROOT ] && mount $DEVCHROOT $CHROOT 
	[ ! -e "$CHROOT$DIST/distfiles" ] && mkdir -pv $CHROOT$DIST/distfiles
	[ ! -e "$CHROOT$DIST/portage" ] && mkdir -pv $CHROOT$DIST/portage
	[ ! -e "$DIST/portage/$CD_PROFILE" ] && mkdir -pv $DIST/portage/$CD_PROFILE
	[ ! -e $CHROOT/tmp/livecd ] && mkdir -pv $CHROOT/tmp/livecd
	local x

	#nie na liveusb, gdyz ramdisk jest maly
	if [ "$RAMDISK" == "0" ]; then
	   mount -o bind $DIST/portage/$CD_PROFILE $CHROOT$DIST/portage || chroot_die
	   for x in $DIST/distfiles 
	   do	
		[ ! -e ${x} ] && mkdir -pv ${x}
		[ ! -e ${CHROOT}${x} ] && mkdir -pv ${CHROOT}${x}
		mount -o bind ${x} ${CHROOT}${x} || chroot_die
	   done
	fi
	
	for x in /dev /proc /sys /dev/pts $DIST/.portage $DIST/.src64bit $DIST/.repos /home/tmp/.packages ${CCACHEDIR}
	do	
		[ ! -e ${x} ] && mkdir -pv ${x}
		[ ! -e ${CHROOT}${x} ] && mkdir -pv ${CHROOT}${x}
		#echo mount -o bind ${x} ${CHROOT}${x}
		mount -o bind ${x} ${CHROOT}${x} || chroot_die
	done
	#echo mount -o bind $PROFILETMP $CHROOT/tmp/livecd
	mount -o bind $PROFILETMP $CHROOT/tmp/livecd || chroot_die
	chmod 1777 $CHROOT/dev/shm
}

umount_all() {
	#echo umount $CHROOT$DIST/portage $CHROOT/tmp/livecd
	umount $CHROOT$DIST/portage $CHROOT/tmp/livecd 2>/dev/null || true
	local x
	for x in /dev/pts ${CCACHEDIR} $DIST/.packages $DIST/.repos $DIST/.src64bit $DIST/distfiles $DIST/.portage /sys /proc /dev /home/tmp/.packages
	do
		#echo umount ${CHROOT}${x}
		umount ${CHROOT}${x} 2>/dev/null || true
	done
}

chroot_die() {
	umount_all
	if [ -n "$1" ]
	then
		echo "chroot_generate: error: $1"
	else
		echo "chroot_generate: aborting."
	fi
	exit 1
}

#jak przerwanie, tez wyczysc 
trap "chroot_die" SIGINT SIGQUIT

fetch() {
	echo Przeladowuje stage3 $CD_STAGEFILE
	cd $CDLOC;
	[ ! -e "$CD_STAGEFILE" ] && wget -c $CD_STAGETARBALL
	umount_all
	[ ! -e "$CHROOT/home" ] && [ ! -z $DEVCHROOT ] && mount $DEVCHROOT $CHROOT
	[ ! -e "$CDLOC/$CD_STAGEFILE" ] && chroot_die "$CD_STAGEFILE nie znaleziony, najpierw wykonaj: v <profil> f"
	echo ">>> Rozpakowuje Gentoo stage3..."
	echo tar xJpf "$CDLOC/$CD_STAGEFILE" -C $CHROOT 
	[ ! -e "$CHROOT/home" ] && tar xJpf "$CDLOC/$CD_STAGEFILE" -C $CHROOT || die "stage tarball extraction error"
        #mv "$CDLOC/$CD_STAGEFILE" $CHROOT
	# aby siec dzialala
	cp /etc/resolv.conf ${CHROOT}/etc
	wget https://raw.githubusercontent.com/pwasiewi/gentools/master/usr/local/bin/gentoolcfg
	chmod 755 ./gentoolcfg
	./gentoolcfg #utworzy /config.txz ze źródeł z gentools repozytorium
	cp2konfig /config.txz $CD_PROFILE #trzeba miec /usr/local/bin/cp2konfig
}

0etap() {
	cat > $PROFILETMP/vcportdir << 'EOF'
#wget -c $CONFIGFILE -O/config.txz
cd / && tar Jxf config.txz
for i in keywords use mask env; do 
[ -f /etc/portage/package.$i ] && mv /etc/portage/package.$i /etc/portage/package.$i.backup
[ ! -e /etc/portage/package.$i ] && mkdir /etc/portage/package.$i
[ -f /etc/portage/package.$i.backup ] && mv /etc/portage/package.$i.backup /etc/portage/package.$i/systemowe.$i
[ ! -e /etc/portage/package.$i/moje.$i ] && touch /etc/portage/package.$i/moje.$i
[ ! -e /etc/portage/package.$i/systemowe.$i ] && touch /etc/portage/package.$i/systemowe.$i
done

[ ! -e /etc/portage/env ] && mkdir /etc/portage/env
[ ! -e /etc/portage/profile ] && mkdir /etc/portage/profile
[ ! -e /etc/portage/profile/package.provided ] && touch /etc/portage/profile/package.provided;
[ ! -e /usr/local/portage ] && mkdir -p /usr/local/portage/metadata/
echo "masters = gentoo" > /usr/local/portage/metadata/layout.conf
echo "vim /etc/portage/package.env/moje.env /etc/portage/package.env/systemowe.env" > /usr/local/bin/vie
echo "echo \"\$1\" >> /etc/portage/package.keywords/moje.keywords" > /usr/local/bin/vex
echo "vim /etc/portage/package.keywords/moje.keywords /etc/portage/package.keywords/systemowe.keywords" > /usr/local/bin/vix
echo "echo \"\$1\" >> /etc/portage/package.use/moje.use" > /usr/local/bin/veu
echo "vim /etc/portage/package.use/moje.use /etc/portage/package.use/systemowe.use" > /usr/local/bin/viu
echo "echo \"\$1\" >> /etc/portage/package.mask/moje.mask" > /usr/local/bin/ves
echo "vim /etc/portage/package.mask/moje.mask /etc/portage/package.mask/systemowe.mask" > /usr/local/bin/vis
echo "echo \"\$1\" >> /etc/portage/profile/package.provided" > /usr/local/bin/vep
echo "vim /etc/portage/profile/package.provided" > /usr/local/bin/vip
echo "echo \"\$1\" >> /etc/portage/make.conf" > /usr/local/bin/vec
echo "vim /etc/portage/make.conf" > /usr/local/bin/vic
chmod 755 /usr/local/bin/v*

# echo 5 > /etc/portage/profile/eapi

cat > /etc/portage/make.conf << 'EOF'

ACCEPT_LICENSE="*"
RUBY_TARGETS="ruby32"
GRUB_PLATFORMS="pc emu efi-64"
PYTHON_SINGLE_TARGET="python3_13"
PYTHON_TARGETS="python3_13"
PYTHON_ABIS="3.13"
USE_PYTHON="3.13"
POSTGRES_TARGETS="postgres17"
PORTAGE_NICENESS="19"
MAKEOPTS="-j4 -l8"
EMERGE_DEFAULT_OPTS="--getbinpkg --binpkg-respect-use=y --jobs 4 --load-average 8 --quiet-build=y --autounmask=y --autounmask-write --keep-going --verbose-conflicts --autounmask-backtrack=y --backtrack=100"
FEATURES="${FEATURES} getbinpkg binpkg-request-signature sandbox parallel-fetch metadata-transfer fail-clean -compressdebug"
CPU_FLAGS_X86="${CPU_FLAGS_X86} mmxext sse sse2 sse3 ssse3 avx avx2"

USE="systemd -elogind -firmware"
#USE="${USE} -X -java systemd -hardened -pic -jit -pgo -graphite branding experimental extras -doc -acl -systemtap"
#USE="${USE} -kde plasma -gnome -gnome-keyring -nautilus grub -mediacenter user-session"
#USE="${USE} reiserfs ntfs fat vfat ntfs reiserfs btrfs dmraid hfs jfs mdadm reiser4 xfs xattr f2fs aufs overlay lvm vnc acl"
#USE="${USE} device-mapper udev openrc kernel-patch -pax_kernel acpi icu -cryptsetup kvm fuse threads usb bluetooth network -consolekit ssl sslv3 wifi -pcap -ipv6 -automount -gnutls -hal -ldap policykit ovs sound -experimental -filecaps mount"
#USE="${USE} -qt4 -qt5 gtk -gtk2 gtk3 javafx cairo sdl avahi webkit boost c++11 c++14 -wxwidgets"

#USE="${USE} video faac faad mpeg mng wmf ogg mpg123 bluray 3dnow win32codecs divx encode dirac alsa a52 aac ieee1394 jpeg2k mp3 schroedinger v4l2 theora vorbis x264 coreavc ffmpeg -libav ffmpeg-mt stereoscopic xvid 3dnowext openal xinerama xvmc g3dvl dts dvd flac opengl xv shaders pulseaudio gstreamer cdr musicbrainz fdk -jack v4l zip"
#USE="${USE} gimp exif lcms jpeg png tiff pdf svg openvg xml gd truetype -qrcode devil gegl introspection imagemagick gif qml"
#USE="${USE} -tools xnest xvfb tslib kms libkms dmx xcb dbus xrandr xorg sna vaapi uxa gbm glamor lcdfilter kdrive infinality xkb"
#USE="${USE} nvidia uvm -cuda gpu egl -wayland osmesa xa vdpau vulkan opencl tinfo gles"
#USE="${USE} lua script llcm-gcc -mpi -mpi-threads openmp smp fortran debugger profiler vala v8 perl python gold -objc-gc -objc -objc++ -static-libs lapack -pic -hardened"
#USE="${USE} cups unicode lzma legacy-systray postgres nsplugin djvu xulrunner bash-completion latex -cleartype -apache2 -apache kpathsea libnotify gnuplot mercurial googledrive"

VIDEO_CARDS="intel radeon nouveau i810 i915 i965 r100 r200 r300 r600 radeonsi amdgpu"
PORT_LOGDIR="/var/log/portage"
QEMU_SOFTMMU_TARGETS="arm x86_64"
QEMU_USER_TARGETS="arm armeb x86_64"
JAVA_HOME="/etc/java-config-2/current-system-vm"

EOF
	echo EOF >> $PROFILETMP/vcportdir
	if [ "$RAMDISK" == "0" ]; then
	    cat >> $PROFILETMP/vcportdir << 'EOF'

echo "nie na LIVEDVD, gdyz ramdisk jest maly i ulotny"
[ -e /usr/portage ] && rm /usr/portage -rf
[ ! -e /usr/portage ] && cd /usr && ln -sfn ../var/tmp/.portage portage
[ -d /usr/src ] && rm -rf /usr/src 
[ ! -e /usr/src ] && cd /usr && ln -sfn ../var/tmp/.src64bit src
[ -e /var/db/repos ] && rm /var/db/repos -rf
[ ! -e /var/db/repos ] && cd /var/db && ln -sfn ../../var/tmp/.repos repos
EOF
	else
	    cat >> $PROFILETMP/vcportdir << 'EOF'
emerge-webrsync
[ -d /usr/portage/distfiles ] && rmdir /usr/portage/distfiles
[ ! -d /var/tmp/distfiles ] && mkdir /var/tmp/distfiles
ln -sfn /var/tmp/distfiles /usr/portage/distfiles
EOF
	fi

        chmod +x $PROFILETMP/vcportdir
        if [ "$HOST" == "1" ]; then
                $PROFILETMP/vcportdir
        else
                mount_all
                chroot $CHROOT /tmp/livecd/vcportdir
                umount_all
        fi

}

1etap() {
        ETAP=1etap
	umount_all
	[ ! -e "$CHROOT/home" ] && [ ! -z $DEVCHROOT ] && mount $DEVCHROOT $CHROOT
        #[ -e $PROFILETMP/$ETAP ] && rm $PROFILETMP/$ETAP
	cat > $PROFILETMP/$ETAP << 'EOF'
echo en_US.UTF-8 UTF-8 > /etc/locale.gen
echo pl_PL.UTF-8 UTF-8 >> /etc/locale.gen
locale-gen
eselect profile set 28 #plasma systemd merged usr 17.1
env-update
. /etc/profile
ln -sfn /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
ln -sf /proc/self/mounts /etc/mtab

#sed -i 's/\ -X\ /\ X\ /g' /etc/portage/make.conf
#sed -i 's/^#ABI/ABI/g' /etc/portage/make.conf
mv /etc/portage/repos.conf/st*.conf ~

e g vim
e g eix
e g gentoolkit genkernel portage euses

vex sys-kernel/gentoo-sources

e g genlop net-misc/dhcpcd grub
e g gpm app-misc/mc ntpsec
e g app-eselect/eselect-repository
EOF

        if [ "$RAMDISK" == "0" ]; then
            cat >> $PROFILETMP/$ETAP << 'EOF'
sed -i 's/^\/dev\//\#\/dev\//g' /etc/fstab
#auto ma max number kernela
eselect kernel set `eselect kernel list | grep linux | wc -l`
sed -i 's/^OLDCONFIG="yes"/OLDCONFIG="no"/' /etc/genkernel.conf
#usuwanie kompilacji kernela hosta
#cd /usr/src/linux && make clean
EOF
        else
            cat >> $PROFILETMP/$ETAP << 'EOF'
e gentoo-sources
eselect kernel set `eselect kernel list | grep linux | wc -l`
cd /usr/src/linux
make defconfig
make kvmconfig
./scripts/config --enable  CONFIG_E1000
./scripts/config --disable DM_DEBUG_BLOCK_STACK_TRACING
./scripts/config --enable SND_INTEL8X0
./scripts/config --enable SND_HDA_GENERIC
./scripts/config --set-val CONFIG_SND_HDA_PREALLOC_SIZE 2048
./scripts/config --enable  CONFIG_INPUT_MOUSEDEV
make olddefconfig
sed -i 's/^OLDCONFIG="yes"/OLDCONFIG="no"/' /etc/genkernel.conf
e k
grub-install /dev/sda
[ -e /usr/lib/systemd/systemd ] && echo 'GRUB_CMDLINE_LINUX="init=/usr/lib/systemd/systemd hpet=disable"' >> /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg
systemctl enable dhcpcd
echo "Wejdź do chroot Gentoo: v a e"
echo "Edytuj jak potrzebne:   /etc/fstab oraz /etc/default/grub"
echo "Zmień koniecznie hasło: passwd"
echo "Wyjdź z chroot Gentoo : CTRL-d"
echo "Zrebootuj:              reboot"
umount /boot
EOF
        fi

	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

2etap(){
	ETAP=2etap
	cat > $PROFILETMP/$ETAP << 'EOF'
# https://wiki.gentoo.org/wiki/Recommended_applications
# https://wiki.gentoo.org/wiki/Recommended_tools
# https://wiki.gentoo.org/wiki/Useful_Portage_tools
#compilation takes 8min
vex app-portage/diffmask
veu "dev-libs/libgcrypt static-libs"
veu "dev-libs/libgpg-error static-libs"
veu "dev-libs/lzo static-libs"
veu "sys-apps/util-linux caps"

e g rlwrap most dvtm pass pfl pybugz elogv eclean-kernel diffmask flaggie portpeek smart-live-rebuild ufed net-misc/curl pydf ncdu acpi acpitool htop atop lsof iotop iftop squashfs-tools sudo suspend p7zip sg3_utils testdisk logrotate gentoolkit f2fs-tools btrfs-progs
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

3etap(){
	ETAP=3etap
	cat > $PROFILETMP/$ETAP << 'EOF'
#system upgrade
#compilation takes 2min
e w #emerge -uND world  - upgrade world
emerge @preserved-rebuild
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

4etap(){
	ETAP=4etap
	cat > $PROFILETMP/$ETAP << 'EOF'
eselect repository enable kde
emaint sync --repo kde
eselect repository enable steam-overlay
emaint sync --repo steam-overlay
eix-update
e w
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

5etap(){
	ETAP=5etap
	cat > $PROFILETMP/$ETAP << 'EOF'
#compilation takes 10min
vex net-analyzer/xprobe
veu "dev-libs/libnl utils"
e g setxkbmap xdpyinfo xrandr xkill xterm alsamixergui gparted freetype media-fonts/liberation-fonts pavucontrol feh lm-sensors xsensors lft nload yersinia vnstat xprobe wavemon geoipupdate qpdfview scite iptraf-ng libreswan openvpn
veu "sys-boot/grub mount"
e g os-prober
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

6etap(){
	ETAP=6etap
	cat > $PROFILETMP/$ETAP << 'EOF'
vex games-engines/minetest
e g games-engines/minetest 
#cd /usr/share/minetest/games/minetest_game/mods
#mesecons.net
#for i in dreambuilder_modpack ; do [ ! -d $i ] && git clone https://gitlab.com/VanessaE/$i; done;
#aliveai depends on technic, 3d_armor, mesecons and smartshop
#[ ! -d smartshop ] && git clone https://github.com/AiTechEye/smartshop
#[ ! -d aliveai ] && git clone https://github.com/AiTechEye/aliveai
#for i in loot orbs_of_time; do [ ! -d $i ] && git clone https://github.com/minetest-mods/$i; done;
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

7etap(){
	ETAP=7etap
	cat > $PROFILETMP/$ETAP << 'EOF'
#compilation takes 30min
e g networkmanager
e g plasma-meta
e g konsole kde-apps/dolphin
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

8etap(){
	ETAP=8etap
	cat > $PROFILETMP/$ETAP << 'EOF'
#compilation takes 30min
# e u app-emulation/virtualbox-guest-additions
# e u virtualbox 
e g x11-drivers/xf86-video-virtualbox
e g app-containers/docker lxc calibre gimp vlc mplayer google-chrome firefox-bin opera

# potem nalezy dodac uzytkownika
useradd -m -g users guest
echo 'exec startplasma-x11' > /home/guest/.xinitrc
chown -R guest:users /home/guest/
usermod -aG docker guest
usermod -aG wheel guest
usermod -aG audio guest
usermod -aG video guest
echo Wykonaj: passwd guest
#passwd guest
EOF
	chmod +x $PROFILETMP/$ETAP
	if [ "$HOST" == "1" ]; then
		$PROFILETMP/$ETAP
	else
        	mount_all
		chroot $CHROOT /tmp/livecd/$ETAP
		umount_all
	fi
}

config() {
wget -c https://github.com/pwasiewi/gentools/archive/master.zip -O/master.zip
cd /
[ -e gentools-master ] && rm -rf gentools-master
[ -e master.zip ] && unzip -qq master.zip && cd gentools-master && tar Jcf config.txz * && mv config.txz / && cd / && rm -rf gentools-master master.zip
}

cross() {
	echo USE="static-libs" crossdev -S --target arm-hardfloat-linux-gnueabi -oO /usr/portage
	time USE="static-libs" crossdev -S --target armv7a-hardfloat-linux-gnueabi -oO /usr/portage
}

crossfirst() {
     	crossdev -C armv7a-hardfloat-linux-gnueabi -f
	cross
	[ -e /usr/armv7a-hardfloat-linux-gnueabi.orig ] && rm -rf /usr/armv7a-hardfloat-linux-gnueabi.orig 
	cp -a /usr/armv7a-hardfloat-linux-gnueabi /usr/armv7a-hardfloat-linux-gnueabi.orig
}

1arm() {
	umount_all
	cp /etc/resolv.conf ${CHROOT}/etc
	gentoolcfg
	cp /config.txz ${CHROOT}
	cd ${CHROOT}
	tar Jxf config.txz
	sed -i 's/^\/dev\//\#\/dev\//g' etc/fstab
	#veu "app-emulation/qemu -accessibility -aio alsa bluetooth bzip2 -caps curl -debug fdt -filecaps -glusterfs gnutls gtk gtk2 -infiniband -iscsi jpeg lzo ncurses nfs nls numa opengl pin-upstream-blobs png pulseaudio python -sasl -sdl -sdl2 -seccomp -selinux -smartcard snappy -spice ssh -static -static-softmmu static-user -systemtap -tci -test threads usb -usbredir -uuid -vde -vhost-net -virgl -virtfs -vnc -vte xattr -xen -xfs -rbd"
	#e qemu
	#etc-update --automode -5
	quickpkg qemu --include-config y
	ROOT=${CHROOT} emerge --usepkgonly --oneshot --nodeps qemu
	gcc -static /usr/local/share/src/qemu-wrapper.c -Ofast -s -o ${CHROOT}/usr/local/bin/qemu-wrapper
}


2arm() {
    cat > $PROFILETMP/vcportdir << 'EOF'
eselect profile set 48 #arm/17.0/armv7a/desktop/plasma/systemd/merged-usr
emerge-webrsync
#[ -e /usr/portage/distfiles ] && rmdir /usr/portage/distfiles
#[ ! -e /var/tmp/distfiles ] && mkdir /var/tmp/distfiles
#ln -sfn /var/tmp/distfiles /usr/portage/distfiles
vcportarm
ln -sfn /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
ln -sf /proc/self/mounts /etc/mtab
echo en_US.UTF-8 UTF-8 >> /etc/locale.gen
echo pl_PL.UTF-8 UTF-8 >> /etc/locale.gen
locale-gen
#sed -i 's/\ -X\ /\ X\ /g' /etc/portage/make.conf
EOF
	chmod +x $PROFILETMP/vcportdir
        mount_all
	chroot $CHROOT /tmp/livecd/vcportdir
	umount_all
}

3arm() {
    	cat > $PROFILETMP/vcportdir << EOF
USE="-X -sound" e vim
e u eix
#e u gentoolkit genkernel portage euses

USE="-sdl" e u genlop net-misc/dhcpcd grub
e u gpm app-misc/mc ntpsec
e u app-eselect/eselect-repository

EOF
        chmod +x $PROFILETMP/vcportdir
        mount_all
        chroot $CHROOT /tmp/livecd/vcportdir
        umount_all
}

4arm() {
    	cat > $PROFILETMP/vcportdir << EOF
e w
emerge @preserved-rebuild
EOF
	chmod +x $PROFILETMP/vcportdir
        mount_all
	chroot $CHROOT /tmp/livecd/vcportdir
	umount_all
}


5arm() {
    	cat > $PROFILETMP/vcportdir << EOF
cd /usr/src
[ ! -e linux-${KERNEL_ARM}.tar.gz ] && wget -O linux-${KERNEL_ARM}.tar.gz https://github.com/raspberrypi/linux/archive/${KERNEL_ARM}.tar.gz
[ ! -d linux-${KERNEL_ARM} ] && tar xzf linux-${KERNEL_ARM}.tar.gz -C /usr/src
ln -sfn linux-${KERNEL_ARM} linux
cd linux
EOF
	chmod +x $PROFILETMP/vcportdir
        mount_all
	chroot $CHROOT /tmp/livecd/vcportdir
	umount_all
}

genkernel() {
	cat > $PROFILETMP/genkernel-build << EOF
sed -i 's/CDROOT="0"/CDROOT="1"/g' /usr/share/genkernel/defaults/initrd.defaults
time MAKEOPTS="-j16 -l32" genkernel --makeopts=-j8 --kernel-config=/usr/src/linux/.config --luks --lvm --no-clean all
ls
sed -i 's/CDROOT="1"/CDROOT="0"/g' /usr/share/genkernel/defaults/initrd.defaults
EOF
	chmod +x $PROFILETMP/genkernel-build
        mount_all
	chroot $CHROOT /tmp/livecd/genkernel-build 
	umount_all
	mv ${CHROOT}/boot/initr*-genkernel* ${PROFILE}/initrd
	if [ ! -e "$PROFILE/tmp" ] 
	then
		mkdir $PROFILE/tmp
	fi
	if [ ! -e "$PROFILE/tmp/kernel" ] 
	then
		mkdir $PROFILE/tmp/kernel
	fi
	mv ${CHROOT}/boot/kernel-genkernel* ${PROFILE}/tmp/kernel/bzImage
	cd ${PROFILE}
	install -d ${ISO} || die
	install -d ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/isolinux.bin ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/isolinux.cfg ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/{*.lss,*.msg} ${ISO}/isolinux || die
	cp ${PROFILE}/initrd ${ISO}/isolinux/initrd || die
	cp ${PROFILETMP}/kernel/bzImage ${ISO}/isolinux/gentoo || die
	touch ${ISO}/livecd || die
}


squashfs_create() {
	cp ${LIVECONF}/profiles/${CD_PROFILE}/.bash_history ${CHROOT}/root || die
	cat > $PROFILETMP/moveandlink << EOF
env-update
source /etc/profile
cd /var
[ ! -e /usr/cache ] && mkdir /usr/cache
[ -d cache/genkernel ] && mv cache/genkernel /usr/cache && ln -sfn ../../usr/cache/genkernel cache/genkernel
[ -d cache/edb ] && mv cache/edb /usr/cache && ln -sfn ../../usr/cache/edb cache/edb
[ -d db ] && mv db /usr && ln -sfn ../usr/db db
cd /usr/share
[ -d X11 ] && mv X11 /var && ln -sfn ../../var/X11 X11
cd /etc
[ -d gconf ] && mv gconf /usr && ln -sfn ../usr/gconf gconf
cd /var/lib
[ -d texmf ] && mv texmf /usr && ln -sfn ../../usr/texmf texmf
chown -R hadoop:hadoop /hadoop/
chown -R guest:users /home/guest/
EOF
	chmod +x $PROFILETMP/moveandlink
        mount_all
	chroot $CHROOT /tmp/livecd/moveandlink
	umount_all
	[ ! -e "$CHROOT/../iso" ] && mkdir $CHROOT/../iso
	echo /usr/bin/mksquashfs ${CHROOT}/* ${CLOOP_FILE} -comp xz -noappend  -always-use-fragments -mem 5G -b 1048576  -Xdict-size 100%
	if [ "$RAMDISK" == "0" ]; then
	   time /usr/bin/mksquashfs ${CHROOT}/* ${CLOOP_FILE} -comp xz -noappend  -always-use-fragments -mem 5G -b 1048576 -Xdict-size 100% || chroot_die
	else
	   time /usr/bin/mksquashfs ${CHROOT}/* ${CLOOP_FILE} -comp xz -noappend  -always-use-fragments || chroot_die
	fi
}

iso_create() {
	install -d ${ISO} || die
	install -d ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/isolinux.bin ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/isolinux.cfg ${ISO}/isolinux || die
	cp ${LIVECONF}/profiles/global/{*.lss,*.msg} ${ISO}/isolinux || die
	cp ${PROFILE}/initrd ${ISO}/isolinux/initrd || die
	cp ${PROFILETMP}/kernel/bzImage ${ISO}/isolinux/gentoo || die
	touch ${ISO}/livecd || die
	#echo mkisofs -J -R -l -o ${PROFILE}/livecd.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ${ISO}
	#if [ "$RAMDISK" == "0" ]; then
	#   time mkisofs -J -R -l -o ${PROFILE}/livecd.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ${ISO}
	#else 
	#   time mkisofs -J -R -l -o ${CHROOT}/livecd.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ${ISO}
	#fi
}


make_isocd() {
growisofs -Z /dev/sr0=${PROFILE}/livecd.iso 
}

chroot_mc() {
cd ${PROFILE}
[ -e /usr/bin/mc ] && mc || vim settings
}

profile_mc() {
cd ${LIVECONF}/profiles/${CD_PROFILE}
[ -e /usr/bin/mc ] && mc || vim settings
}


cleanall() {
rm -rf $CHROOT/var/log/portage/*
rm $CHROOT/var/log/*
rm -rf $CHROOT/var/cache/revdep-rebuild/*
rm -rf $CHROOT/var/tmp/genkernel/*
rm -rf $CHROOT/usr/share/doc/groff*
rm -rf $CHROOT/usr/share/doc/freetds*
rm -rf $CHROOT/usr/share/doc/docbook-xsl-stylesheets*
cd $CHROOT/usr/share/locale
rm -rf af am ang ar az be be@latin bg bn bn_IN br bs ca cs cs_CZ cy da dz el eo es es_AR et et_EE eu fa fi ga gl gr gu gu_IN he hi hr hy id is it it_IT ja ka kn ko ku ky li lt lv mg mi mk ml mn mr ms nb nb_NO ne nn no nso oc or pa pt pt_BR pt_PT ro ru rw si sk sl sq sr sr@Latn sr@ije sv sv_FI sv_SE ta te th tk tr tr_TR ug uz uz@cyrillic vi wa wo xh yi zh zh_CN zh_HK zh_TW zu

cd $CHROOT/usr/share/doc
#mkdir /tmp/sharedoc
#mv R* gtk* slony* pg* postgres* phppg* octave* docker* lxc* zfs* spl*  /tmp/sharedoc 
rm -rf $CHROOT/usr/share/doc/ghostscript-gpl*
rm -rf $CHROOT/usr/share/doc/imagemagick*
#mv /tmp/sharedoc/* .
ls
cd

}

chroot_e() {
	umount_all
	mount_all
	cat > $PROFILETMP/chroot-e << EOF
cd /root
export TERM=xterm
/bin/bash
export PS1='`pwd`:#>'
EOF
	chmod +x $PROFILETMP/chroot-e
	chroot $CHROOT /tmp/livecd/chroot-e
	umount_all
}

chroot_bis() {
	chroot $CHROOT
}

binfmt() {
	binfmt-run
}

case "$2" in
    f)	
    	fetch		;;
    k) 
	genkernel 	;;
    a)
	cleanall
	squashfs_create
    	iso_create
	;;
    s)
	squashfs_create ;;
    i) 
    	iso_create      ;;
    c)  
    	make_isocd      ;;
    e)  
    	chroot_e        ;;
    fmt)  
    	binfmt   	;;
    r)  
    	chroot_mc       ;;
    p)  
    	profile_mc      ;;
    eb)  
    	chroot_bis      ;;
    u)	
    	umount_all      ;;
    cfg)	
    	config          ;;
    cross1)	
    	cross           ;;
    cross0)	
    	crossfirst      ;;
    arm1)	
    	1arm            ;;
    arm2)	
    	2arm            ;;
    arm3)	
    	3arm            ;;
    arm4)	
    	4arm            ;;
    arm5)	
    	5arm            ;;
    0)	
    	0etap           ;;
    01)	
    	1etap           ;;
    1)	
     	0etap
    	1etap           ;;
    2)	
    	2etap           ;;
    3)	
    	3etap           ;;
    4)	
    	4etap           ;;
    5)	
    	5etap           ;;
    6)	
    	6etap           ;;
    7)	
    	7etap           ;;
    8)	
    	8etap           ;;
    0host)	
    	(( HOST = 1 ))
    	0etap           ;;
    1host)	
    	(( HOST = 1 ))
	#0etap
    	1etap           ;;
    2host)	
    	(( HOST = 1 ))
    	2etap           ;;
    3host)	
    	(( HOST = 1 ))
    	3etap           ;;
    4host)	
    	(( HOST = 1 ))
    	4etap           ;;
    5host)	
    	(( HOST = 1 ))
    	5etap           ;;
    6host)	
    	(( HOST = 1 ))
    	6etap           ;;
    7host)	
    	(( HOST = 1 ))
    	7etap           ;;
    8host)	
    	(( HOST = 1 ))
    	8etap           ;;
    *) 
	usage 
	exit 1
	;;
esac
exit 0
