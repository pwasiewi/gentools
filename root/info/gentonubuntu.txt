Welcome to LIVEUSB gentools! (easy to remember: http://bit.ly/gen2ls)

To launch the live USB, boot with BIOS option enabled for DVD or USB boot.
We distinguish two types of operations:

I. INSTALLATION FROM OFFICIAL OR UBUNTU LIVEDVD/USB ON VIRTUALBOX

##############################################################
# Stage 1
#------------------------------------------------------------

sudo su -

#------------------------------------------------------------
#Scripts for screencasts about efficient Gentoo installation: http://bit.ly/gentools
#------------------------------------------------------------
#OLDER VERSION (OBSOLETE): wget -c http://bit.ly/gentools01  -O/config.txz
#NEWER VERSION:

wget https://raw.githubusercontent.com/pwasiewi/gentools/master/usr/local/bin/gentoolcfg
chmod 755 ./gentoolcfg
./gentoolcfg #utworzy /config.txz ze źródeł z gentools repozytorium
cd / && tar Jxvf config.txz && cd

#------------------------------------------------------------
#install vim if not available

#on Gentoo LiveDVD: emerge vim

#on Ubuntu LiveDVD: apt install vim
#------------------------------------------------------------

v a p #edit settings chroot to /dev/sda5

#------------------------------------------------------------
#RAMDISK=1 isolated install e.g. from UbuntuLiveDVD without sharing /portage with host
#WARNING /dev/sda5 is the root partition for the VirtualBox disk
#CAUTION with /DEV/SDA symbol – ensure it's the correct disk
#START – partitioning in VirtualBox when /dev/sda is unused
#------------------------------------------------------------

genformathdemo /dev/sda

#------------------------------------------------------------
#END – partitioning in VirtualBox-----------------
#To remove partitions if needed:
#for v_partition in $(parted -s /dev/sda print|awk '/^ / {print $1}'); do parted -s /dev/sda rm ${v_partition}; done
#Disc size: parted -s /dev/sda print|awk '/^Disk/ {print $3}'|sed 's/[Mm][Bb]//'
#------------------------------------------------------------

v a f #get stage3/4
#this step takes ~23min
time v a 1 #extract stage3/4, portage and edit make.conf, vim
v a e #chroot into new gentoo system to change password

#------------------------------------------------------------
#START command entry: v a e
#if needed edit fstab:  vim /etc/fstab
#change password:                passwd #CHANGE ROOT PASSWORD
#CTRL-d wychodzi z:          v a e
#END command entry: v a e
#REBOOT and continue with installation e.g. plasma-meta
#------------------------------------------------------------

reboot

##############################################################
#Stage 2 – replace gcc with newer version and compile boost
#------------------------------------------------------------
v a 2host
#------------------------------------------------------------
##optional: upgrade gcc (takes ~30min)
#vex sys-devel/gcc
#OLDGCC=`gcc-config -c | cut -d'-' -f 5`
#e gcc
#gcc-config -l
#gcc-config 2
#. /etc/profile
#env-update
#fix_libtool_files.sh ${OLDGCC}
#e libtool n


##############################################################
#Stage 3 – update system with enabled USE flags
#------------------------------------------------------------
v a 3host
#------------------------------------------------------------
##compilation takes ~2h
sed -i 's/#USE="${USE} video/USE="${USE} video/g' /etc/portage/make.conf
sed -i 's/#USE="${USE} gimp/USE="${USE} gimp/g' /etc/portage/make.conf
sed -i 's/#USE="${USE} tools/USE="${USE} tools/g' /etc/portage/make.conf
sed -i 's/bindist/-bindist/g' /etc/portage/make.conf
sed -i 's/-X\ /X\ /g' /etc/portage/make.conf

veu "media-video/pipewire -ffmpeg"
veu "media-libs/libsndfile minimal"

e w #emerge -uND world  - upgrade world
emerge @preserved-rebuild


##############################################################
#Stage 4 – install git and layman for extra packages
#------------------------------------------------------------
v a 4host
#------------------------------------------------------------
#
#/etc/init.d/ntp-client start
#/etc/init.d/gpm start
#rc-update add gpm default
eselect repository enable kde
#eselect repository enable x11
#eselect repository enable sabayon 
eselect repository enable steam-overlay
#eselect repository enable lto-overlay
#eix-update
#e w


##############################################################
#Stage 5 – install additional packages and update after overlays
#------------------------------------------------------------
v a 5host
#------------------------------------------------------------
##Recommended programs – 103 apps
##compilation time: ~16min
vex sys-fs/reiserfsprogs
#vex sys-fs/mdadm
#vex sys-fs/squahsfs-tools
#vex net-analyzer/xprobe
#vex app-admin/pass
#vex dev-python/pymountboot
#vex app-admin/eclean-kernel
#vex app-portage/diffmask
#vex app-portage/install-mask
#vex app-portage/gpytage
#veu "dev-libs/libgpg-error static-libs"
#veu "dev-libs/lzo static-libs"
#veu "dev-libs/libgcrypt static-libs"
## https://wiki.gentoo.org/wiki/Recommended_applications
## https://wiki.gentoo.org/wiki/Recommended_tools
## https://wiki.gentoo.org/wiki/Useful_Portage_tools
#sed -i 's/PYTHON_SINGLE_TARGET="python3_4"/PYTHON_SINGLE_TARGET="python2_7"/g' /etc/portage/make.conf
#e u rlwrap most dvtm pass pfl pybugz elogv eclean-kernel diffmask flaggie install-mask portpeek smart-live-rebuild ufed gpytage net-misc/curl pydf ncdu acpi acpitool htop atop lsof iotop iftop squashfs-tools sudo suspend p7zip sg3_utils testdisk logrotate gentoolkit f2fs-tools btrfs-progs
#68 apps 8min
e u setxkbmap xdpyinfo xrandr xkill xterm alsamixergui gparted freetype media-fonts/liberation-fonts pavucontrol
e u feh lm-sensors xsensors lft nload yersinia vnstat xprobe wavemon geoipupdate qpdfview scite iptraf-ng libreswan openvpn
e u os-prober

##############################################################
#Stage 6 – compile game package
#------------------------------------------------------------
v a 6host
#------------------------------------------------------------
vex dev-games/irrlicht-mt
vex dev-games/irrlicht-mt-headers
vex games-action/minetest
e u games-action/minetest
cd /usr/share/minetest/games/minetest_game/mods
#mesecons.net
for i in dreambuilder_modpack ; do [ ! -d $i ] && git clone https://gitlab.com/VanessaE/$i; done;
#aliveai depends on technic, 3d_armor, mesecons and smartshop
[ ! -d smartshop ] && git clone https://github.com/AiTechEye/smartshop
[ ! -d aliveai ] && git clone https://github.com/AiTechEye/aliveai
for i in loot orbs_of_time; do [ ! -d $i ] && git clone https://github.com/minetest-mods/$i; done;

##############################################################
#Stage 7 – entire Plasma desktop (min. 80min)
#------------------------------------------------------------
v a 7host
#------------------------------------------------------------
# optional: networkmanager (12min)
e u networkmanager
# plasma: 294 apps (85min)
veu "app-crypt/qca qt5"
veu "app-text/poppler qt5"
veu "sys-libs/libblockdev cryptsetup"
e plasma-meta
e u konsole kde-apps/dolphin media-video/plasma-mediacenter

##############################################################
#Stage 8 – extra packages, x11 virtualbox, new user
#------------------------------------------------------------
v a 8host
#------------------------------------------------------------
# compile time: 1h + upgrade
veu "sys-libs/libcap static-libs"
veu "sys-fs/lvm2 thin"
e u app-containers/docker lxc
# e u cdrtools dvd+rw-tools libisoburn 
# e u firefox-bin opera
# e u R octave nodejs mongodb
# e u app-emulation/virtualbox-guest-additions
# e u virtualbox 
e u x11-drivers/xf86-video-virtualbox
# e u calibre gimp vlc mplayer
# e u skype google-chrome steam-launcher blender 

# then add user
useradd -m -g users guest
echo 'exec startplasma-x11' > /home/guest/.xinitrc
chown -R guest:users /home/guest/
usermod -aG docker guest
usermod -aG wheel guest
usermod -aG audio guest
usermod -aG video guest
echo run: passwd guest
#passwd guest

##############################################################

II. INSTALLING OR BOOTING YOUR OWN GENTOO USB

On your own computer, first create (e.g., using Partition Magic, gdisk) three small partitions: 10MB, 10MB, 100MB, and one free ~20GB partition (format ext4; for SSD, use stride, stripe-width).
Partition types in gdisk: EF00, EF02, 8300, 8300 – for EFI boot, kernel, and system.
Optionally add a swap partition at least half the size of your physical RAM.

After booting the liveusb, use sg_map to determine the name of the large partition, find it with gdisk /dev/sd??, format it (CAREFULLY), e.g.:

mount root partition:
montuj-dysk /dev/sd?
OR if SSD:
montuj-ssd /dev/sd?
OR for Samsung EVO:
montuj-evo /dev/sd?

mount boot partition:
mount /dev/sd? /mnt/key
cp -a /boot/* /mnt/key

edit config files:
vim fstab
cp -a fstab inittab /mnt/gentoo/etc

chroot:
mchroot /mnt/gentoo
mount /boot
grub-install /dev/sdx
grub-mkconfig -o /boot/grub/grub.cfg

change root password:
passwd

After booting from hard disk, in boot menu choose Gentoo.
Login as root and create new user:
adduser -m login_name
passwd login_name

connect to network (if not done automatically):
/etc/init.d/net.eth0 restart
or
/etc/init.d/net.enp0s3 restart

run:
emaint sync

If overlays present in /etc/portage/repos.conf:
eseselect repository enable kde
eselect repository enable x11
eselect repository enable sabayon
eseselect repository enable steam-overlay

System is now ready.

##############################################################
GENTOO USAGE

emerge --sync # e m
emaint sync   # newer version
Fetches the Portage tree, meaning package names (specifically ebuild files) and their dependencies

eselect repository list -i
Displays the list of installed repositories

eselect repository enable kde
eselect repository enable x11
eselect repository enable sabayon
eselect repository enable steam-overlay
Enables example overlays

Update experimental repository lists installed locally
emaint -A sync

eselect repository enable overlay_name
Adds an overlay (a list of ebuilds) maintained by Gentoo enthusiasts on gentoo.org who want to test the latest features of programs

eselect repository list
Displays all experimental overlays available on gentoo.org

eselect repository list -i
Displays experimental overlays (ebuild lists) installed locally

vim /etc/make.conf
Here you can edit CPU flags, but most importantly the Portage system flags listed under USE="..." in quotes, e.g. USE="gnome kde" — this means to compile programs with support for GNOME and KDE

vim /etc/portage/package.use/package.use
Here you can assign Portage system flags to specific programs if they differ from the global flags set in /etc/make.conf

vim /etc/portage/package.keywords/package.keywords
This is where you add packages you want to compile from development (usually latest or near-latest) source versions. If you only care about stability, it's recommended to remove as many entries from this file as possible — but who cares about stability when using Gentoo...

vim /etc/portage/profile/package.provided
Lists package titles that are "missing" but pretend to be present in the system or prevent their updates

emerge -uND world  # e w
After fetching the latest tree with `emerge --sync`, updates packages to newer versions and applies any changes in system flags from /etc/make.conf and /etc/portage/package.use

emerge -fuN world
Downloads all source code first; afterwards you can run `emerge -uN world` offline, since everything needed for compilation has already been fetched with the `-f` option

emerge -uNp world
Lists the names of packages to be compiled without actually compiling them

emerge -uNpv world
Lists packages to be compiled, along with the Portage system flags that will be used during compilation

emerge -uNpvt world
Lists packages to be compiled, along with system flags used, and shows the dependency tree hierarchy using indentation — a textual semi-tree

emerge -e world  # e e w
Recompiles every installed program from scratch

emerge liquorix-sources
Fetches the source code for `liquorix-sources`
The config file `.config` must be fetched separately, or generated as needed in /usr/src/linux:
make defconfig; make kvmconfig
